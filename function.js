    let seedOrder = [];
    let seedBuy = [];
    const delayActionMenu = 500; //Fire pit -> choose dish
    const delayCookCollectAdd = 200; //Cook -> Cook -> Collect -> Collect -> Add to queue -> Add to queue

  async function randomDelayBetweenFunctions() {
    const delay = 200;
    console.log(`‚è≥ Ch·ªù ${delay / 1000} gi√¢y tr∆∞·ªõc khi ch·∫°y h√†m ti·∫øp theo...`);
    await new Promise((resolve) => setTimeout(resolve, delay));
  }


  //H√†m Plating 
  async function handlePlantingPhase(seedOrder) {
    console.log("üå± === B·∫ÆT ƒê·∫¶U GIAI ƒêO·∫†N TR·ªíNG C√ÇY ===");
    
    const maxPlantingTime = 4 * 60 * 1000; // T·ªëi ƒëa 4 ph√∫t
    const checkInterval = 5000; // Ki·ªÉm tra m·ªói 15 gi√¢y
    const startTime = Date.now();
    
    let consecutiveNoPlantCount = 0;
    const maxNoPlantLimit = 1;
    
    while (Date.now() - startTime < maxPlantingTime) {
      const elapsedMinutes = Math.floor((Date.now() - startTime) / 60000);
      console.log(`üå± Ki·ªÉm tra √¥ tr·ªìng... (ƒë√£ ch·∫°y ${elapsedMinutes} ph√∫t)`);

      let hasPlantAction = false;

      try {
        // QUAN TR·ªåNG: Ch·ªâ ch·ªçn seed 1 l·∫ßn ·ªü ƒë√¢y
        await selectSeed(seedOrder);
        await randomDelayBetweenFunctions();
        
        // X·ª≠ l√Ω tr·ªìng c√¢y KH√îNG ch·ªçn seed
        const plantResult = await handlePlantClick(); // H√†m m·ªõi kh√¥ng ch·ªçn seed
        
        // Ki·ªÉm tra xem c√≥ tr·ªìng ƒë∆∞·ª£c c√¢y kh√¥ng
        let images = Array.from(document.querySelectorAll("img")).filter(
          (img) => img.src.includes("plant.png") || img.src.includes("soil2.png")
        );
        
        if (images.length > 0) {
          hasPlantAction = true;
          console.log(`‚úÖ C√≤n ${images.length} √¥ c√≥ th·ªÉ tr·ªìng/x·ª≠ l√Ω`);
        } else {
          console.log("üö´ Kh√¥ng c√≤n √¥ ƒë·ªÉ tr·ªìng c√¢y");
        }
        
        await randomDelayBetweenFunctions();
      } catch (error) {
        console.error("‚ùå L·ªói trong qu√° tr√¨nh tr·ªìng c√¢y:", error);
      }

      // C·∫≠p nh·∫≠t b·ªô ƒë·∫øm
      if (hasPlantAction) {
        consecutiveNoPlantCount = 0;
        console.log("üîÑ C√≥ √¥ ƒë·ªÉ tr·ªìng, ti·∫øp t·ª•c ki·ªÉm tra...");
      } else {
        consecutiveNoPlantCount++;
        console.log(`‚ö†Ô∏è Kh√¥ng c√≥ √¥ ƒë·ªÉ tr·ªìng (${consecutiveNoPlantCount}/${maxNoPlantLimit})`);
      }

      // N·∫øu kh√¥ng c√≥ √¥ ƒë·ªÉ tr·ªìng qu√° nhi·ªÅu l·∫ßn, chuy·ªÉn sang giai ƒëo·∫°n ch·∫∑t c√¢y
      if (consecutiveNoPlantCount >= maxNoPlantLimit) {
        console.log("‚ö†Ô∏è Kh√¥ng c√≤n √¥ ƒë·ªÉ tr·ªìng c√¢y!");
        break;
      }

      console.log("‚è≥ Ch·ªù 5 gi√¢y tr∆∞·ªõc khi ki·ªÉm tra √¥ tr·ªìng ti·∫øp theo...");
      await new Promise((resolve) => setTimeout(resolve, checkInterval));
    }
    
    if (Date.now() - startTime >= maxPlantingTime) {
      console.log(`‚è∞ ƒê√£ ƒë·∫°t th·ªùi gian t·ªëi ƒëa cho giai ƒëo·∫°n tr·ªìng c√¢y (${maxPlantingTime / 60000} ph√∫t)`);
    }
    
    console.log("üå± === HO√ÄN TH√ÄNH GIAI ƒêO·∫†N TR·ªíNG C√ÇY ===");
  }


  // Giai ƒëo·∫°n ch·∫∑t c√¢y - ch·ªâ ch·∫°y 1 l·∫ßn sau khi tr·ªìng xong
  async function handleTreeChoppingPhase() {
    console.log("üå≤ === B·∫ÆT ƒê·∫¶U GIAI ƒêO·∫†N CH·∫∂T C√ÇY ===");
    
    try {
      await handleTreeChop(); // Ch·∫∑t t·∫•t c·∫£ c√¢y c√≥ th·ªÉ
    } catch (error) {
      console.error("‚ùå L·ªói trong qu√° tr√¨nh ch·∫∑t c√¢y:", error);
    }
    
    console.log("üå≤ === HO√ÄN TH√ÄNH GIAI ƒêO·∫†N CH·∫∂T C√ÇY ===");
  }

 


async function handlePlantClick() {
  console.log("üîç Ki·ªÉm tra t·∫•t c·∫£ ·∫£nh plant.png ho·∫∑c soil2.png...");

  let images = Array.from(document.querySelectorAll("img")).filter(
    (img) => img.src.includes("plant.png") || img.src.includes("soil2.png")
  );

  if (images.length === 0) {
    console.log("‚úÖ Kh√¥ng c√≤n ·∫£nh c·∫ßn x·ª≠ l√Ω, d·ª´ng l·∫°i!");
    return;
  }

  images = images.sort(() => Math.random() - 0.5);

  for (const img of images) {
    const parent = img.closest("div");
    if (!parent) continue;

    if (img.src.includes("plant.png")) {
      console.log("üå± Click v√†o plant.png");
      simulateRandomClick(img);

      await new Promise((resolve) => setTimeout(resolve, 300));

      const newImg = parent.querySelector("img");
      if (newImg && newImg.src.includes("soil2.png")) {
        console.log("üü§ ƒê√£ ƒë·ªïi th√†nh soil2.png, ti·∫øp t·ª•c click...");
        await clickSoil2(newImg);
      } else {
        console.log("üå± V·∫´n l√† plant.png, click l·∫ßn n·ªØa...");
        simulateRandomClick(img);
        await new Promise((resolve) => setTimeout(resolve, 300));
      }
    } else if (img.src.includes("soil2.png")) {
      console.log("üü§ T√¨m th·∫•y soil2.png, x·ª≠ l√Ω t·ª´ng c√°i m·ªôt...");
      await clickSoil2(img);
    }

    const fixedContainer = document.querySelector(
      ".fixed.inset-0.overflow-y-auto"
    );
    if (fixedContainer) {
      console.log("üîÑ Ph√°t hi·ªán menu ƒë·∫∑c bi·ªát, x·ª≠ l√Ω ti·∫øp...");
      await handleFixedElement();
      await randomDelayBetweenFunctions();
      await handleMoonSeekers();
      console.log("‚úÖ Ho√†n th√†nh x·ª≠ l√Ω menu.");
    }

    await randomDelayBetweenFunctions();
  }
}

function findMarketImage() {
  console.log("üîç ƒêang t√¨m ki·∫øm Market...");
  
  // T√¨m c·∫£ hai lo·∫°i market c√≥ th·ªÉ c√≥
  const marketImage = document.querySelector("img[src*='market.webp'], img[src*='bettys_market.png']");
  
  if (marketImage) {
    const marketType = marketImage.src.includes('market.webp') ? 'market.webp' : 'bettys_market.png';
    return marketImage;
  } else {
    console.log("‚ùå Kh√¥ng t√¨m th·∫•y Market");
    return null;
  }
}

// ch·ªçn h·∫°t gi·ªëng
async function selectSeed(seedOrder) {
  console.log("üõí ƒêang t√¨m Market...");

  const marketImage = findMarketImage();

  marketImage.click();
  console.log("‚úÖ ƒê√£ click v√†o Market");

  await new Promise((resolve) => setTimeout(resolve, 1000));

  const seedElements = document.querySelectorAll(
    ".fixed.inset-0.overflow-y-auto .flex.flex-wrap.mb-2 > .relative"
  );
  if (seedElements.length === 0) {
    console.log("‚ùå Kh√¥ng t√¨m th·∫•y danh s√°ch h·∫°t gi·ªëng, d·ª´ng l·∫°i!");
    return;
  }

  for (let seedIndex of seedOrder) {
    let seedElement = seedElements[seedIndex - 1];
    if (!seedElement) {
      console.log(`‚ö†Ô∏è H·∫°t gi·ªëng s·ªë ${seedIndex} kh√¥ng t·ªìn t·∫°i trong danh s√°ch!`);
      continue;
    }

    let stockDiv = seedElement.querySelector(
      ".w-fit.justify-center.flex.items-center.text-xs"
    );
    let stockText = stockDiv?.textContent?.trim() || "0";
    let match = stockText.match(/(\d+)/);
    let stockValue = match ? parseInt(match[1]) : 0;

    if (stockValue <= 0) {
      console.log(`‚ùå H·∫øt h·∫°t gi·ªëng s·ªë ${seedIndex}`);

      // L·∫•y automationSettings t·ª´ storage local thay v√¨ g·ªçi background
      const { automationSettings } = await chrome.storage.local.get("automationSettings");
      if (automationSettings?.autoBuyIfOutOfStock) {
        console.log(`üõí ƒêang th·ª≠ mua l·∫°i seed ${seedIndex}...`);
        
        // G·ªåI TR·ª∞C TI·∫æP H√ÄM handleBuySeed thay v√¨ qua background
        await handleBuySeed([seedIndex]);

        await new Promise((resolve) => setTimeout(resolve, 2000)); // TƒÉng th·ªùi gian ch·ªù

        // Refresh l·∫°i danh s√°ch seed elements sau khi mua
        const updatedSeedElements = document.querySelectorAll(
          ".fixed.inset-0.overflow-y-auto .flex.flex-wrap.mb-2 > .relative"
        );
        let updatedSeedElement = updatedSeedElements[seedIndex - 1];
        if (!updatedSeedElement) {
          console.log(`‚ùå Kh√¥ng t√¨m th·∫•y l·∫°i seed ${seedIndex} sau khi mua.`);
          continue;
        }

        let updatedStockDiv = updatedSeedElement.querySelector(
          ".w-fit.justify-center.flex.items-center.text-xs"
        );
        let updatedStockText = updatedStockDiv?.textContent?.trim() || "0";
        let updatedMatch = updatedStockText.match(/(\d+)/);
        let updatedStockValue = updatedMatch ? parseInt(updatedMatch[1]) : 0;

        if (updatedStockValue <= 0) {
          console.log(`üö´ ƒê√£ th·ª≠ mua nh∆∞ng seed ${seedIndex} v·∫´n h·∫øt h√†ng. Chuy·ªÉn sang seed kh√°c...`);
          continue;
        } else {
          console.log(`‚úÖ Mua th√†nh c√¥ng seed ${seedIndex}, stock hi·ªán t·∫°i: ${updatedStockValue}`);

          // Ch·ªçn seed sau khi mua th√†nh c√¥ng
          const cropImage = updatedSeedElement.querySelector("img[src*='crop.png']");
          if (cropImage) {
            cropImage.click();
            console.log(`üå± ƒê√£ ch·ªçn l·∫°i seed ${seedIndex} sau khi mua`);
          }

          // ƒê√≥ng market
          setTimeout(() => {
            const closeButton = document.querySelector(
              "img[src='https://sunflower-land.com/game-assets/icons/close.png']"
            );
            if (closeButton) {
              closeButton.click();
              console.log("‚ùå ƒê√£ ƒë√≥ng Market");
            }
          }, 500);

          await randomDelayBetweenFunctions();
          return;
        }
      } else {
        console.log("‚ö†Ô∏è Kh√¥ng t·ª± mua l·∫°i v√¨ ch∆∞a b·∫≠t autoBuyIfOutOfStock");
        continue;
      }
    }

    // N·∫øu c√≤n h√†ng t·ª´ ƒë·∫ßu
    const cropImage = seedElement.querySelector("img[src*='crop.png']");
    if (!cropImage) {
      console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh crop.png trong seed ${seedIndex}, b·ªè qua.`);
      continue;
    }

    cropImage.click();
    console.log(`‚úÖ ƒê√£ ch·ªçn h·∫°t gi·ªëng s·ªë ${seedIndex} (stock: ${stockValue})`);

    setTimeout(() => {
      const closeButton = document.querySelector(
        "img[src='https://sunflower-land.com/game-assets/icons/close.png']"
      );
      if (closeButton) {
        closeButton.click();
        console.log("‚ùå ƒê√£ ƒë√≥ng Market");
      }
    }, 500);

    await randomDelayBetweenFunctions();
    return;
  }

  console.log("‚ùå T·∫•t c·∫£ h·∫°t gi·ªëng trong danh s√°ch ƒë·ªÅu h·∫øt h√†ng ho·∫∑c kh√¥ng h·ª£p l·ªá!");
}



// T√¨m container ch·ª©a c√°c n√∫t Buy 
async function findBuyContainer() {
  const selectors = [
    "div.flex.space-x-1.sm\\:space-x-0.sm\\:space-y-1.sm\\:flex-col.w-full",
    "[class*='buy']",
    "div:has(button)",
    ".market-buy",
    ".buy-section"
  ];

  for (const selector of selectors) {
    try {
      const container = document.querySelector(selector);
      if (container && container.querySelectorAll("button").length > 0) {
        const hasBuyButton = Array.from(container.querySelectorAll("button")).some(btn =>
          btn.textContent.toLowerCase().includes("buy")
        );
        if (hasBuyButton) return container;
      }
    } catch (e) {
      continue;
    }
  }

  const allButtons = Array.from(document.querySelectorAll("button"));
  const buyButton = allButtons.find(btn =>
    btn.textContent.toLowerCase().includes("buy")
  );

  if (buyButton) {
    let parent = buyButton.parentElement;
    while (parent && parent !== document.body) {
      const buttonsInParent = parent.querySelectorAll("button").length;
      if (buttonsInParent >= 2) {
        return parent;
      }
      parent = parent.parentElement;
    }
    return buyButton.parentElement;
  }

  return null;
}

function isSoldOutVisible() {
  return Array.from(document.querySelectorAll("*"))
    .some(el => {
      try {
        return (
          el.textContent.toLowerCase().includes("sold out") &&
          getComputedStyle(el).backgroundColor.includes("rgb(228, 59, 68)")
        );
      } catch {
        return false;
      }
    });
}


// Ki·ªÉm tra v√† x·ª≠ l√Ω popup x√°c nh·∫≠n
async function handleConfirmationPopup() {
  try {
  
    // Ch·ªù popup load ho√†n to√†n
    await new Promise(r => setTimeout(r, 400));
    
    let confirmButton = null;
    
    // PH∆Ø∆†NG PH√ÅP ƒê∆†N GI·∫¢N: T√¨m n√∫t Buy th·ª© 4 (n√∫t x√°c nh·∫≠n trong popup)
    
    const allButtons = Array.from(document.querySelectorAll('button'));
    const visibleBuyButtons = [];
    
    // L·ªçc t·∫•t c·∫£ n√∫t Buy hi·ªÉn th·ªã
    allButtons.forEach((btn, index) => {
      const rect = btn.getBoundingClientRect();
      const text = btn.textContent.trim();
      
      if (rect.width > 0 && rect.height > 0 && !btn.disabled) {
        // N√∫t c√≥ ch·ª©a t·ª´ "Buy" ho·∫∑c c√≥ pattern "Buy X"
        if (text.toLowerCase().includes('buy') || text.match(/^Buy\s+\d+$/)) {
          visibleBuyButtons.push({
            button: btn,
            text: text,
            index: index
          });
        }
      }
    });
    
    console.log(`üìã T√¨m th·∫•y ${visibleBuyButtons.length} n√∫t Buy hi·ªÉn th·ªã:`);
    visibleBuyButtons.forEach((btn, i) => {
      console.log(`   ${i + 1}. "${btn.text}"`);
    });
    
    // N√∫t th·ª© 4 (index 3) ch√≠nh l√† n√∫t x√°c nh·∫≠n trong popup
    if (visibleBuyButtons.length >= 4) {
      confirmButton = visibleBuyButtons[3].button; // Index 3 = n√∫t th·ª© 4
      console.log(`üéØ T√¨m th·∫•y n√∫t Buy th·ª© 4 (x√°c nh·∫≠n): "${confirmButton.textContent.trim()}"`);
    }
    // Fallback: N·∫øu ch·ªâ c√≥ 3 n√∫t, t√¨m n√∫t m·ªõi nh·∫•t (kh√¥ng ph·∫£i Cancel)
    else if (visibleBuyButtons.length === 3) {
      // C√≥ th·ªÉ n√∫t th·ª© 3 ch√≠nh l√† n√∫t x√°c nh·∫≠n
      const lastBuyButton = visibleBuyButtons[2].button;
      
      // Ki·ªÉm tra xem c√≥ n√∫t Cancel kh√¥ng
      const hasCancelButton = allButtons.some(btn => {
        const rect = btn.getBoundingClientRect();
        return rect.width > 0 && rect.height > 0 && 
               btn.textContent.toLowerCase().includes('cancel');
      });
      
      if (hasCancelButton) {
        confirmButton = lastBuyButton;
        console.log(`üéØ Fallback: Ch·ªçn n√∫t Buy cu·ªëi c√πng l√†m n√∫t x√°c nh·∫≠n: "${confirmButton.textContent.trim()}"`);
      }
    }
    
    // Fallback cu·ªëi c√πng: T√¨m n√∫t Buy m·ªõi xu·∫•t hi·ªán (kh√¥ng ph·∫£i Cancel)
    if (!confirmButton) {
      console.log("üîç Fallback: T√¨m n√∫t Buy m·ªõi xu·∫•t hi·ªán trong popup...");
      
      // T√¨m container c√≥ c·∫£ Buy v√† Cancel
      const containers = Array.from(document.querySelectorAll('div'));
      
      for (const container of containers) {
        const containerButtons = Array.from(container.querySelectorAll('button'));
        const visibleContainerButtons = containerButtons.filter(btn => {
          const rect = btn.getBoundingClientRect();
          return rect.width > 0 && rect.height > 0 && !btn.disabled;
        });
        
        if (visibleContainerButtons.length >= 2) {
          const hasCancel = visibleContainerButtons.some(btn => 
            btn.textContent.toLowerCase().includes('cancel')
          );
          
          const buyButtons = visibleContainerButtons.filter(btn => 
            btn.textContent.toLowerCase().includes('buy') && 
            !btn.textContent.toLowerCase().includes('cancel')
          );
          
          if (hasCancel && buyButtons.length > 0) {
            // Ch·ªçn n√∫t Buy cu·ªëi c√πng trong container n√†y
            confirmButton = buyButtons[buyButtons.length - 1];
            console.log(`üéØ T√¨m th·∫•y n√∫t x√°c nh·∫≠n trong container: "${confirmButton.textContent.trim()}"`);
            break;
          }
        }
      }
    }
    
    // Th·ª±c hi·ªán click n√∫t x√°c nh·∫≠n
    if (confirmButton) {
      const buttonText = confirmButton.textContent.trim();
      console.log(`üéØ S·∫º CLICK N√öT X√ÅC NH·∫¨N: "${buttonText}"`);
      
      // ƒê·∫£m b·∫£o n√∫t visible v√† scroll v√†o view
      confirmButton.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'center',
        inline: 'center'
      });
      
      await new Promise(r => setTimeout(r, 300));
      
      // Click n√∫t x√°c nh·∫≠n
      let clickSuccess = false;
      
      try {
        confirmButton.click();
        console.log(`üñ±Ô∏è ƒê√£ click n√∫t x√°c nh·∫≠n: "${buttonText}"`);
        clickSuccess = true;
      } catch (error) {
        console.log(`‚ö†Ô∏è Click th∆∞·ªùng th·∫•t b·∫°i, th·ª≠ click v·ªõi event:`, error.message);
        
        try {
          const clickEvent = new MouseEvent('click', {
            bubbles: true,
            cancelable: true,
            view: window
          });
          confirmButton.dispatchEvent(clickEvent);
          console.log(`üñ±Ô∏è ƒê√£ click v·ªõi event: "${buttonText}"`);
          clickSuccess = true;
        } catch (error2) {
          console.log(`‚ùå C·∫£ hai c√°ch click ƒë·ªÅu th·∫•t b·∫°i:`, error2.message);
        }
      }
      
      if (clickSuccess) {
        // Ch·ªù popup ƒë√≥ng
        await new Promise(r => setTimeout(r, 500));
        
        // Ki·ªÉm tra popup ƒë√£ ƒë√≥ng
        let popupClosed = false;
        for (let i = 0; i < 10; i++) {
          if (!isConfirmationPopupVisible()) {
            popupClosed = true;
            break;
          }
          await new Promise(r => setTimeout(r, 100));
        }
        
        if (popupClosed) {
          console.log("‚úÖ X√ÅC NH·∫¨N MUA TH√ÄNH C√îNG - Popup ƒë√£ ƒë√≥ng");
        } else {
          console.log("‚ö†Ô∏è Popup v·∫´n hi·ªÉn th·ªã, nh∆∞ng c√≥ th·ªÉ ƒë√£ mua th√†nh c√¥ng");
        }
        
        return true;
      } else {
        console.log("‚ùå KH√îNG TH·ªÇ CLICK N√öT X√ÅC NH·∫¨N");
        return false;
      }
    } else {
      console.log("‚ùå KH√îNG T√åM TH·∫§Y N√öT X√ÅC NH·∫¨N");
      
      // Debug: Hi·ªÉn th·ªã t·∫•t c·∫£ n√∫t hi·ªán t·∫°i
      console.log("\nüîç DEBUG: T·∫•t c·∫£ n√∫t hi·ªÉn th·ªã hi·ªán t·∫°i:");
      const debugButtons = Array.from(document.querySelectorAll('button')).filter(btn => {
        const rect = btn.getBoundingClientRect();
        return rect.width > 0 && rect.height > 0;
      });
      
      debugButtons.forEach((btn, i) => {
        console.log(`   ${i + 1}. "${btn.textContent.trim()}" - Disabled: ${btn.disabled}`);
      });
      
      return false;
    }
    
  } catch (error) {
    console.error("‚ùå L·ªói khi x·ª≠ l√Ω popup x√°c nh·∫≠n:", error);
    return false;
  }
}

// Debug function - ki·ªÉm tra popup v√† c√°c n√∫t
function debugPopupButtons() {
  console.log("üîç DEBUG POPUP: Ki·ªÉm tra t·∫•t c·∫£ n√∫t trong popup...");
  
  const allButtons = Array.from(document.querySelectorAll('button'));
  const visibleButtons = allButtons.filter(btn => {
    const rect = btn.getBoundingClientRect();
    return rect.width > 0 && rect.height > 0;
  });
  
  console.log(`üìã T√¨m th·∫•y ${visibleButtons.length} n√∫t hi·ªÉn th·ªã:`);
  
  visibleButtons.forEach((btn, i) => {
    const text = btn.textContent.trim();
    const isDisabled = btn.disabled;
    const hasLightButton = btn.style.getPropertyValue('--button-image').includes('light_button.png');
    
    // Ph√¢n lo·∫°i n√∫t
    let category = "Kh√°c";
    if (text.toLowerCase().includes('cancel')) {
      category = "Cancel";
    } else if (text.match(/^Buy\s+(\d+)$/)) {
      const quantity = parseInt(text.match(/\d+/)[0]);
      if (quantity === 1) {
        category = "Buy 1 (B·ªé QUA)";
      } else if (quantity === 10) {
        category = "Buy 10 (B·ªé QUA)";
      } else {
        category = `Buy ${quantity} (H·ª¢P L·ªÜ)`;
      }
    }
    
    console.log(`  ${i + 1}. "${text}" - ${category} - Disabled: ${isDisabled} - LightButton: ${hasLightButton}`);
  });
  
  // T√¨m n√∫t h·ª£p l·ªá
  const validBuyButtons = visibleButtons.filter(btn => {
    const text = btn.textContent.trim();
    const match = text.match(/^Buy\s+(\d+)$/);
    if (match) {
      const quantity = parseInt(match[1]);
      return quantity > 1 && quantity !== 10 && !btn.disabled;
    }
    return false;
  });
  
  console.log(`\nüéØ N√∫t Buy h·ª£p l·ªá (X > 1, X ‚â† 10):`);
  if (validBuyButtons.length > 0) {
    validBuyButtons.forEach((btn, i) => {
      const quantity = parseInt(btn.textContent.match(/\d+/)[0]);
      console.log(`   ${i + 1}. "${btn.textContent.trim()}" - S·ªë l∆∞·ª£ng: ${quantity} ‚úÖ`);
    });
    console.log(`\n‚≠ê S·∫º CH·ªåN: "${validBuyButtons[0].textContent.trim()}"`);
  } else {
    console.log("   ‚ùå Kh√¥ng t√¨m th·∫•y n√∫t Buy h·ª£p l·ªá!");
  }
  
  return validBuyButtons;
}


function isConfirmationPopupVisible() {
  try {
    const allButtons = Array.from(document.querySelectorAll('button'));
    const visibleButtons = allButtons.filter(btn => {
      const rect = btn.getBoundingClientRect();
      return rect.width > 0 && rect.height > 0;
    });
    
    // ƒê·∫øm s·ªë n√∫t Buy hi·ªÉn th·ªã
    const buyButtonCount = visibleButtons.filter(btn => 
      btn.textContent.toLowerCase().includes('buy')
    ).length;
    
    // Ki·ªÉm tra c√≥ n√∫t Cancel kh√¥ng
    const hasCancelButton = visibleButtons.some(btn => 
      btn.textContent.toLowerCase().includes('cancel')
    );
    
    // Popup xu·∫•t hi·ªán khi c√≥ >= 4 n√∫t Buy HO·∫∂C c√≥ Cancel + √≠t nh·∫•t 1 n√∫t Buy
    const hasPopup = buyButtonCount >= 4 || (hasCancelButton && buyButtonCount >= 1);
    
    if (hasPopup) {
      console.log(`üîç Popup detected: ${buyButtonCount} n√∫t Buy, Cancel: ${hasCancelButton}`);
    }
    
    return hasPopup;
    
  } catch (error) {
    console.error("L·ªói khi ki·ªÉm tra popup:", error);
    return false;
  }
}


// T√¨m n√∫t Buy t·ªët nh·∫•t theo logic: N√∫t 3 (Buy All) -> N√∫t 2 (Buy 10 ho·∫∑c Buy X) -> N√∫t 1 (Buy 1)
async function findBestAvailableBuyButton() {
  // T√¨m t·∫•t c·∫£ n√∫t Buy theo class ch√≠nh x√°c
  const buyButtonSelectors = [
    // N√∫t Buy v·ªõi class c·ª• th·ªÉ
    'button.w-full.p-1.text-sm[class*="justify-center"][class*="items-center"]',
    // N√∫t Buy trong container
    'div[class*="flex"][class*="space-x"] button',
    // Fallback selector
    'button'
  ];
  
  let allButtons = [];
  
  for (const selector of buyButtonSelectors) {
    try {
      const buttons = Array.from(document.querySelectorAll(selector));
      const buyButtons = buttons.filter(btn => {
        const text = btn.textContent.toLowerCase();
        return text.includes("buy") && !btn.disabled &&
               btn.getBoundingClientRect().width > 0 && 
               btn.getBoundingClientRect().height > 0;
      });
      
      if (buyButtons.length > 0) {
        allButtons = buyButtons;
        break;
      }
    } catch (e) {
      continue;
    }
  }
  
  if (allButtons.length === 0) {
    console.log("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t Buy n√†o.");
    return null;
  }

  console.log(`üîç T√¨m th·∫•y ${allButtons.length} n√∫t Buy`);
  
  // ∆Øu ti√™n: N√∫t 3 (Buy All) -> N√∫t 2 (Buy 10/X) -> N√∫t 1 (Buy 1)
  
  // 1. T√¨m n√∫t th·ª© 3 (Buy All) - ch·ªâ xu·∫•t hi·ªán khi stock > 10
  if (allButtons.length >= 3) {
    const thirdButton = allButtons[2]; // Index 2 = n√∫t th·ª© 3
    const thirdButtonText = thirdButton.textContent.toLowerCase().trim();
    
    // N√∫t th·ª© 3 c√≥ th·ªÉ l√† "Buy All", "Buy [s·ªë l·ªõn]", ho·∫∑c c√≥ class ƒë·∫∑c bi·ªát
    const isThirdButton = thirdButton.classList.contains('mt-1') || 
                         thirdButton.style.getPropertyValue('--button-image').includes('light_button.png') ||
                         thirdButtonText.includes('all') ||
                         /buy\s*\d{2,}/.test(thirdButtonText); // Buy v·ªõi s·ªë >= 10
    
    if (isThirdButton) {
      console.log(`üéØ ∆Øu ti√™n n√∫t th·ª© 3: ${thirdButton.textContent.trim()}`);
      return { 
        button: thirdButton, 
        quantity: 'all', 
        isThirdButton: true,
        buttonPosition: 3
      };
    }
  }
  
  // 2. T√¨m n√∫t th·ª© 2 (Buy 10 ho·∫∑c Buy X khi stock ‚â§ 10)
  if (allButtons.length >= 2) {
    const secondButton = allButtons[1]; // Index 1 = n√∫t th·ª© 2
    const secondButtonText = secondButton.textContent.toLowerCase().trim();
    
    console.log(`üéØ Ch·ªçn n√∫t th·ª© 2: ${secondButton.textContent.trim()}`);
    
    // Tr√≠ch xu·∫•t s·ªë l∆∞·ª£ng t·ª´ text
    const quantityMatch = secondButtonText.match(/buy\s*(\d+)/);
    const quantity = quantityMatch ? parseInt(quantityMatch[1]) : 10;
    
    return { 
      button: secondButton, 
      quantity: quantity, 
      isThirdButton: false,
      buttonPosition: 2
    };
  }
  
  // 3. Fallback: N√∫t th·ª© 1 (Buy 1)
  if (allButtons.length >= 1) {
    const firstButton = allButtons[0]; // Index 0 = n√∫t th·ª© 1
    console.log(`üéØ Fallback n√∫t th·ª© 1: ${firstButton.textContent.trim()}`);
    
    return { 
      button: firstButton, 
      quantity: 1, 
      isThirdButton: false,
      buttonPosition: 1
    };
  }

  return null;
}

async function safeClickButton(button, buttonName, isThirdButton = false, buttonPosition = 1) {
  try {
    if (!button) {
      console.log(`‚ö†Ô∏è N√∫t ${buttonName} kh√¥ng t·ªìn t·∫°i.`);
      return false;
    }
    
    const rect = button.getBoundingClientRect();
    if (rect.width === 0 || rect.height === 0) {
      console.log(`‚ö†Ô∏è N√∫t ${buttonName} kh√¥ng hi·ªÉn th·ªã.`);
      return false;
    }
    
    if (button.disabled) {
      console.log(`‚ö†Ô∏è N√∫t ${buttonName} b·ªã v√¥ hi·ªáu h√≥a.`);
      return false;
    }
    
    // Scroll v√†o view tr∆∞·ªõc khi click
    button.scrollIntoView({ behavior: 'smooth', block: 'center' });
    await new Promise(r => setTimeout(r, 200));
    
    button.click();
    console.log(`üñ±Ô∏è ƒê√£ click n√∫t ${buttonName} (v·ªã tr√≠ ${buttonPosition}${isThirdButton ? ' - c√≥ popup' : ''})`);
    
    // Ch·ªâ n√∫t th·ª© 3 m·ªõi c√≥ popup x√°c nh·∫≠n
    if (isThirdButton && buttonPosition === 3) {
      
      // Ch·ªù popup xu·∫•t hi·ªán v·ªõi timeout d√†i h∆°n
      let popupAppeared = false;
      for (let i = 0; i < 15; i++) { // TƒÉng t·ª´ 10 l√™n 15 l·∫ßn
        if (isConfirmationPopupVisible()) {
          popupAppeared = true;
          break;
        }
        await new Promise(r => setTimeout(r, 100));
      }
      
      if (!popupAppeared) {
        // Th·ª≠ ki·ªÉm tra xem c√≥ th·ªÉ ƒë√£ mua th√†nh c√¥ng lu√¥n
        await new Promise(r => setTimeout(r, 500));
        
        // N·∫øu v·∫´n kh√¥ng c√≥ popup, coi nh∆∞ th√†nh c√¥ng
        if (!isConfirmationPopupVisible()) {
          return true;
        }
      }
      
      // X·ª≠ l√Ω popup n·∫øu c√≥
      if (popupAppeared || isConfirmationPopupVisible()) {
        const confirmed = await handleConfirmationPopup();
        if (!confirmed) {
          console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c nh·∫≠n mua ${buttonName}`);
          return false;
        }
        console.log("‚úÖ ƒê√£ x√°c nh·∫≠n mua th√†nh c√¥ng");
      }
    } else {
      // N√∫t 1 v√† 2 kh√¥ng c√≥ popup, ch·ªù ng·∫Øn
      await new Promise(r => setTimeout(r, 200));
    }
    
    return true;
    
  } catch (error) {
    console.error(`‚ùå L·ªói khi click n√∫t ${buttonName}:`, error);
    return false;
  }
}

// Ki·ªÉm tra stock hi·ªán t·∫°i (n·∫øu c√≥ th·ªÉ)
function getCurrentStock() {
  try {
    const stockElements = document.querySelectorAll(".w-fit.justify-center.flex.items-center.text-xs");
    for (let el of stockElements) {
      const text = el.textContent;
      if (text.includes("Stock:")) {
        const match = text.match(/Stock:\s*(\d+)/);
        if (match) return parseInt(match[1]);
      }
    }
  } catch (e) {
    // Kh√¥ng th·ªÉ ƒë·ªçc stock
  }
  return null;
}

// Mua seed t·ª± ƒë·ªông t·ª´ danh s√°ch seedBuy - PHI√äN B·∫¢N C·∫¢I TI·∫æN CHO NHI·ªÄU N√öT BUY
async function handleBuySeed(seedBuy) {
  console.log("üõí ƒêang t√¨m Market...");

  const marketImage = document.querySelector("img[src*='market.webp']");
  if (!marketImage) {
    console.log("‚ùå Kh√¥ng t√¨m th·∫•y Market, d·ª´ng l·∫°i!");
    return;
  }

  marketImage.click();
  console.log("‚úÖ ƒê√£ click v√†o Market");
  await new Promise(resolve => setTimeout(resolve, 1000));

  const seedElements = document.querySelectorAll(
    ".fixed.inset-0.overflow-y-auto .flex.flex-wrap.mb-2 > .relative"
  );
  if (seedElements.length === 0) {
    console.log("‚ùå Kh√¥ng t√¨m th·∫•y danh s√°ch h·∫°t gi·ªëng, d·ª´ng l·∫°i!");
    return;
  }

  for (let seedIndex of seedBuy) {
    const seedElement = seedElements[seedIndex - 1];
    if (!seedElement) {
      console.log(`‚ö†Ô∏è H·∫°t gi·ªëng s·ªë ${seedIndex} kh√¥ng t·ªìn t·∫°i!`);
      continue;
    }

    let cropImage = seedElement.querySelector("img[src*='crop.png']");
    if (!cropImage) {
      console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh crop.png trong h·∫°t gi·ªëng s·ªë ${seedIndex}, b·ªè qua.`);
      continue;
    }

    cropImage.click();
    console.log(`‚úÖ ƒê√£ ch·ªçn h·∫°t gi·ªëng s·ªë ${seedIndex}`);
    await new Promise(r => setTimeout(r, 500));

    // Ki·ªÉm tra Sold Out ngay sau khi click
    if (isSoldOutVisible()) {
      console.log(`üõë H·∫°t gi·ªëng s·ªë ${seedIndex} ƒë√£ Sold Out t·ª´ ƒë·∫ßu.`);
      continue;
    }

    console.log(`üí∞ B·∫Øt ƒë·∫ßu mua h·∫°t gi·ªëng s·ªë ${seedIndex} cho ƒë·∫øn khi Sold Out...`);
    
    let consecutiveFailures = 0;
    const maxFailures = 8;
    let buyCount = 0;

    while (!isSoldOutVisible()) {
      // T√åM L·∫†I N√öT M·ªñI L·∫¶N ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ n√∫t ph√π h·ª£p nh·∫•t
      const buttonInfo = await findBestAvailableBuyButton();
      
      if (!buttonInfo) {
        consecutiveFailures++;
        console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t Buy kh·∫£ d·ª•ng (l·∫ßn ${consecutiveFailures}/${maxFailures})`);
        
        if (consecutiveFailures >= maxFailures) {
          console.log(`‚õî D·ª´ng mua seed ${seedIndex} do kh√¥ng t√¨m th·∫•y n√∫t Buy sau ${maxFailures} l·∫ßn th·ª≠.`);
          break;
        }
        
        await new Promise(r => setTimeout(r, 500));
        continue;
      }

      const { button: availableButton, quantity, isThirdButton, buttonPosition } = buttonInfo;
      const buttonLabel = availableButton.textContent.trim();
      
      // Ch·ªâ n√∫t th·ª© 3 m·ªõi c·∫ßn popup x√°c nh·∫≠n
      const clicked = await safeClickButton(availableButton, buttonLabel, isThirdButton, buttonPosition);

      if (clicked) {
        buyCount++;
        consecutiveFailures = 0;
        
        // Log progress v·ªõi th√¥ng tin chi ti·∫øt
        const currentStock = getCurrentStock();
        const quantityText = quantity === 'all' ? 'ALL' : quantity;
        
        if (currentStock !== null) {
          console.log(`üì¶ ƒê√£ mua ${buyCount} l·∫ßn (${quantityText} m·ªói l·∫ßn, n√∫t ${buttonPosition}), Stock c√≤n: ${currentStock}`);
        } else {
          console.log(`üì¶ ƒê√£ mua ${buyCount} l·∫ßn b·∫±ng ${buttonLabel} (n√∫t ${buttonPosition})`);
        }
      } else {
        consecutiveFailures++;
        console.log(`‚ö†Ô∏è Click kh√¥ng th√†nh c√¥ng (l·∫ßn ${consecutiveFailures}/${maxFailures})`);
        
        if (consecutiveFailures >= maxFailures) {
          console.log(`‚õî D·ª´ng mua seed ${seedIndex} do qu√° nhi·ªÅu l·∫ßn click kh√¥ng th√†nh c√¥ng.`);
          break;
        }
      }

      // Ki·ªÉm tra sold out sau m·ªói l·∫ßn mua
      if (isSoldOutVisible()) {
        console.log(`üéâ Seed ${seedIndex} ƒë√£ SOLD OUT! T·ªïng c·ªông mua ${buyCount} l·∫ßn.`);
        break;
      }

      // Delay t√πy thu·ªôc v√†o v·ªã tr√≠ n√∫t: n√∫t 3 c·∫ßn th·ªùi gian x·ª≠ l√Ω popup
      const delay = buttonPosition === 3 ? 600 : (buttonPosition === 2 ? 300 : 250);
      await new Promise(r => setTimeout(r, delay));
    }

    console.log(`‚úÖ Ho√†n th√†nh mua seed ${seedIndex}`);
    await new Promise(r => setTimeout(r, 400));
  }
  
  console.log("üéä Ho√†n th√†nh t·∫•t c·∫£ vi·ªác mua seeds!");
}
  
  

  async function checkAndBuyAxes(neededAxes) {
    console.log("üîç Ki·ªÉm tra s·ªë r√¨u trong Market...");

    try {
      // B∆∞·ªõc 1: M·ªü Market b·∫±ng c√°ch click v√†o ·∫£nh "workbench.png"
      console.log("üìÇ ƒêang m·ªü Market...");
      const workbenchImg = document.querySelector("img[src*='workbench.png']");
      if (!workbenchImg) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y Workbench ƒë·ªÉ m·ªü Market.");
        return false;
      }
      
      workbenchImg.click();
      console.log("‚úÖ ƒê√£ click v√†o Workbench.");
      await new Promise(r => setTimeout(r, 2000)); // TƒÉng th·ªùi gian ch·ªù ƒë·ªÉ Market load ho√†n to√†n

      // B∆∞·ªõc 2: ƒê·ª£i Market load v√† ki·ªÉm tra s·ªë l∆∞·ª£ng r√¨u
      const currentAxes = await getCurrentAxeCountInMarket();
      if (currentAxes === null) {
        console.log("‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh s·ªë l∆∞·ª£ng r√¨u trong Market.");
        await closeMenu();
        return false;
      }

      console.log(`üî¢ S·ªë l∆∞·ª£ng r√¨u hi·ªán c√≥ trong Market: ${currentAxes}, c·∫ßn: ${neededAxes}`);

      if (currentAxes >= neededAxes) {
        console.log("‚úÖ S·ªë r√¨u hi·ªán c√≥ ƒë·ªß ƒë·ªÉ ch·∫∑t c√¢y.");
        await closeMenu();
        return true;
      }

      // B∆∞·ªõc 3: Mua r√¨u c√≤n thi·∫øu
      const axesToBuy = neededAxes - currentAxes;
      console.log(`üõí C·∫ßn mua th√™m ${axesToBuy} r√¨u...`);
      const success = await buyAxes(axesToBuy);
      
      await closeMenu();
      return success;

    } catch (error) {
      console.error("‚ùå L·ªói trong qu√° tr√¨nh ki·ªÉm tra/mua r√¨u:", error);
      await closeMenu();
      return false;
    }
  }

  // H√†m ki·ªÉm tra s·ªë l∆∞·ª£ng r√¨u trong Market - ch·ªâ t√¨m trong div.relative ch·ª©a ·∫£nh r√¨u
  async function getCurrentAxeCountInMarket() {
    try {
      console.log("üîç ƒêang t√¨m r√¨u trong Market...");
      
      // Ch·ªù th√™m ƒë·ªÉ ƒë·∫£m b·∫£o Market ƒë√£ load
      await new Promise(r => setTimeout(r, 1000));

      
      const axeContainers = Array.from(document.querySelectorAll("div.relative"))
        .filter(div => {
          // Ki·ªÉm tra xem div c√≥ ch·ª©a ·∫£nh r√¨u kh√¥ng
          const imgInContainer = div.querySelector("img[src*='axe']");
          if (!imgInContainer) return false;

          // Ki·ªÉm tra src c·ªßa ·∫£nh ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√≥ l√† r√¨u (kh√¥ng ph·∫£i pickaxe, battle axe...)
          const imgSrc = imgInContainer.src || imgInContainer.getAttribute('src') || '';
          const isAxeImage = imgSrc.includes('axe') && 
                            !imgSrc.includes('wood_pickaxe') && 
                            !imgSrc.includes('stone_pickaxe') &&  
                            !imgSrc.includes('iron_pickaxe') &&
                            !imgSrc.includes('gold_pickaxe');

          if (isAxeImage) {
            const style = window.getComputedStyle(div);
            const width = parseFloat(style.width);
            const height = parseFloat(style.height);
            return true;
          }
          
          return false;
        });

      if (axeContainers.length === 0) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y div.relative ch·ª©a ·∫£nh r√¨u trong Market.");
        return 0;
      }

      // L·∫•y container ƒë·∫ßu ti√™n (th∆∞·ªùng ch·ªâ c√≥ 1)
      const axeContainer = axeContainers[0];
      const axeImg = axeContainer.querySelector("img[src*='axe']");
      

      // T√¨m s·ªë l∆∞·ª£ng trong ch√≠nh container n√†y
      const axeCount = await getNumberFromAxeContainer(axeContainer, axeImg);
      if (axeCount !== null) {
        return axeCount;
      }

      // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ click ƒë·ªÉ hi·ªÉn th·ªã tooltip
      const clickCount = await getAxeCountByClick(axeImg);
      if (clickCount !== null) {
        return clickCount;
      }

      console.log("‚ö†Ô∏è Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c s·ªë l∆∞·ª£ng r√¨u. Gi·∫£ ƒë·ªãnh l√† 0.");
      return 0;

    } catch (error) {
      console.error("‚ùå L·ªói trong getCurrentAxeCountInMarket:", error);
      return null;
    }
  }

  // H√†m l·∫•y s·ªë l∆∞·ª£ng t·ª´ container ch·ª©a r√¨u - t·ªëi ∆∞u h√≥a ch·ªâ t√¨m trong div.relative ƒë√≥
  async function getNumberFromAxeContainer(axeContainer, axeImg) {
    try {
      
      // Log th√¥ng tin container ƒë·ªÉ debug
      const containerInfo = {
        className: axeContainer.className,
        innerHTML: axeContainer.innerHTML.substring(0, 200) + "...",
        childrenCount: axeContainer.children.length
      };

      // Ph∆∞∆°ng ph√°p 1: T√¨m s·ªë trong direct children (con tr·ª±c ti·∫øp c·ªßa div.relative)
      const directNumbers = Array.from(axeContainer.children)
        .filter(child => {
          // Lo·∫°i tr·ª´ element ·∫£nh
          if (child.tagName === 'IMG' || child === axeImg) {
            console.log("‚ùå B·ªè qua IMG element");
            return false;
          }
          
          const text = child.textContent.trim();
          const isNumber = /^\d+$/.test(text);
          const value = parseInt(text);
          
          return isNumber && value > 0 && value <= 999;
        })
        .map(el => ({
          element: el,
          value: parseInt(el.textContent.trim()),
          text: el.textContent.trim(),
          tagName: el.tagName
        }));

      if (directNumbers.length > 0) {
        
        // N·∫øu ch·ªâ c√≥ 1 s·ªë, ƒë√≥ ch√≠nh l√† s·ªë l∆∞·ª£ng r√¨u
        if (directNumbers.length === 1) {
          return directNumbers[0].value;
        }
        
        // N·∫øu c√≥ nhi·ªÅu s·ªë, ch·ªçn s·ªë nh·ªè nh·∫•t (th∆∞·ªùng l√† s·ªë l∆∞·ª£ng item)
        const result = Math.min(...directNumbers.map(item => item.value));
        return result;
      }

      // Ph∆∞∆°ng ph√°p 2: T√¨m trong t·∫•t c·∫£ text nodes b√™n trong container (kh√¥ng ph·∫£i IMG)

      const allTextNodes = [];
      
      function collectTextNodes(node) {
        if (node.nodeType === Node.TEXT_NODE) {
          const text = node.textContent.trim();
          if (/^\d+$/.test(text)) {
            const value = parseInt(text);
            if (value > 0 && value <= 999) {
              allTextNodes.push({
                text: text,
                value: value,
                parentTag: node.parentElement?.tagName || 'UNKNOWN'
              });
            }
          }
        } else if (node.nodeType === Node.ELEMENT_NODE && node.tagName !== 'IMG') {
          for (const child of node.childNodes) {
            collectTextNodes(child);
          }
        }
      }
      
      collectTextNodes(axeContainer);
      
      if (allTextNodes.length > 0) {
        console.log(`‚úÖ T√¨m th·∫•y ${allTextNodes.length} s·ªë trong text nodes:`, allTextNodes);
        
        // Ch·ªçn s·ªë nh·ªè nh·∫•t
        const result = Math.min(...allTextNodes.map(n => n.value));
        console.log(`‚úÖ S·ªë l∆∞·ª£ng r√¨u t·ª´ text nodes: ${result}`);
        return result;
      }

      // Ph∆∞∆°ng ph√°p 3: T√¨m b·∫•t k·ª≥ element n√†o ch·ª©a ch·ªâ s·ªë (kh√¥ng ph·∫£i IMG)
      console.log("üîç T√¨m element ch·ª©a ch·ªâ s·ªë...");
      const numberElements = Array.from(axeContainer.querySelectorAll("*"))
        .filter(el => {
          if (el.tagName === 'IMG' || el === axeImg) return false;
          
          const text = el.textContent.trim();
          const hasOnlyNumber = /^\d+$/.test(text);
          const value = parseInt(text);
          
          return hasOnlyNumber && value > 0 && value <= 999;
        })
        .map(el => ({
          element: el,
          value: parseInt(el.textContent.trim()),
          text: el.textContent.trim(),
          tagName: el.tagName,
          className: el.className
        }));

      if (numberElements.length > 0) {
        console.log(`‚úÖ T√¨m th·∫•y ${numberElements.length} element ch·ª©a s·ªë:`, 
          numberElements.map(n => `${n.value} (${n.tagName}.${n.className})`));
        
        // Ch·ªçn s·ªë nh·ªè nh·∫•t
        const result = Math.min(...numberElements.map(n => n.value));
        console.log(`‚úÖ S·ªë l∆∞·ª£ng r√¨u t·ª´ number elements: ${result}`);
        return result;
      }

      console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·ªë l∆∞·ª£ng trong container ch·ª©a r√¨u.");
      return null;

    } catch (error) {
      console.error("‚ùå L·ªói trong getNumberFromAxeContainer:", error);
      return null;
    }
  }

  // H√†m l·∫•y s·ªë l∆∞·ª£ng b·∫±ng c√°ch click v√†o r√¨u
  async function getAxeCountByClick(axeImg) {
    try {
      console.log("üñ±Ô∏è Th·ª≠ click v√†o r√¨u ƒë·ªÉ hi·ªÉn th·ªã s·ªë l∆∞·ª£ng...");
      
      // L∆∞u snapshot tr∆∞·ªõc khi click
      const beforeNumbers = captureNumbersSnapshot();
      
      // Click v√†o r√¨u
      axeImg.click();
      await new Promise(r => setTimeout(r, 1000));
      
      // L∆∞u snapshot sau khi click
      const afterNumbers = captureNumbersSnapshot();
      
      // T√¨m v·ªã tr√≠ c·ªßa r√¨u
      const axeRect = axeImg.getBoundingClientRect();
      
      // T√¨m s·ªë m·ªõi xu·∫•t hi·ªán g·∫ßn r√¨u
      const newNumbers = afterNumbers.filter(afterItem => {
        // Ki·ªÉm tra xem s·ªë n√†y c√≥ t·ªìn t·∫°i tr∆∞·ªõc ƒë√≥ kh√¥ng
        const existedBefore = beforeNumbers.some(beforeItem => 
          beforeItem.text === afterItem.text &&
          Math.abs(beforeItem.left - afterItem.left) < 5 &&
          Math.abs(beforeItem.top - afterItem.top) < 5
        );
        
        if (existedBefore) return false;
        
        // Ki·ªÉm tra kho·∫£ng c√°ch v·ªõi r√¨u
        const distance = Math.sqrt(
          Math.pow(afterItem.left - axeRect.left, 2) + 
          Math.pow(afterItem.top - axeRect.top, 2)
        );
        
        return distance < 200 && afterItem.value > 0 && afterItem.value <= 999;
      });

      // Click ra ngo√†i ƒë·ªÉ ·∫©n tooltip
      document.body.click();
      await new Promise(r => setTimeout(r, 500));

      if (newNumbers.length > 0) {
        // Ch·ªçn s·ªë g·∫ßn nh·∫•t v·ªõi r√¨u
        const closest = newNumbers.reduce((prev, curr) => {
          const prevDist = Math.sqrt(
            Math.pow(prev.left - axeRect.left, 2) + 
            Math.pow(prev.top - axeRect.top, 2)
          );
          const currDist = Math.sqrt(
            Math.pow(curr.left - axeRect.left, 2) + 
            Math.pow(curr.top - axeRect.top, 2)
          );
          return currDist < prevDist ? curr : prev;
        });
        
        console.log(`‚úÖ T√¨m th·∫•y s·ªë l∆∞·ª£ng r√¨u t·ª´ click: ${closest.value}`);
        return closest.value;
      }

      return null;
    } catch (error) {
      console.error("‚ùå L·ªói trong getAxeCountByClick:", error);
      return null;
    }
  }

  // H√†m l·∫•y s·ªë t·ª´ parent ho·∫∑c sibling elements
  async function getNumberFromParentSiblings(container) {
    try {
      // Ki·ªÉm tra parent elements
      let parent = container.parentElement;
      for (let i = 0; i < 3 && parent; i++) {
        const numbers = Array.from(parent.querySelectorAll("*"))
          .filter(el => {
            const text = el.textContent.trim();
            return /^\d+$/.test(text) && !container.contains(el);
          })
          .map(el => parseInt(el.textContent.trim()))
          .filter(num => num > 0 && num <= 999);

        if (numbers.length > 0) {
          const result = Math.min(...numbers);
          console.log(`‚úÖ T√¨m th·∫•y s·ªë l∆∞·ª£ng t·ª´ parent level ${i + 1}: ${result}`);
          return result;
        }
        
        parent = parent.parentElement;
      }

      // Ki·ªÉm tra sibling elements
      if (container.parentElement) {
        const siblings = Array.from(container.parentElement.children)
          .filter(el => el !== container);
        
        for (const sibling of siblings) {
          const text = sibling.textContent.trim();
          if (/^\d+$/.test(text)) {
            const num = parseInt(text);
            if (num > 0 && num <= 999) {
              console.log(`‚úÖ T√¨m th·∫•y s·ªë l∆∞·ª£ng t·ª´ sibling: ${num}`);
              return num;
            }
          }
        }
      }

      return null;
    } catch (error) {
      console.error("‚ùå L·ªói trong getNumberFromParentSiblings:", error);
      return null;
    }
  }

  // H√†m helper ƒë·ªÉ capture snapshot c√°c s·ªë tr√™n m√†n h√¨nh
  function captureNumbersSnapshot() {
    return Array.from(document.querySelectorAll("*"))
      .map(el => {
        const text = el.textContent.trim();
        if (!/^\d+$/.test(text)) return null;
        
        try {
          const rect = el.getBoundingClientRect();
          return {
            text: text,
            value: parseInt(text),
            left: rect.left,
            top: rect.top,
            element: el
          };
        } catch {
          return null;
        }
      })
      .filter(item => item && item.value > 0 && item.value <= 9999);
  }

  async function buyAxes(toBuy) {
    console.log(`üõí B·∫Øt ƒë·∫ßu mua ${toBuy} r√¨u...`);

    try {
      const craftContainer = await findCraftContainer();
      if (!craftContainer) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y khu v·ª±c craft trong Market.");
        return false;
      }

      const buttons = Array.from(craftContainer.querySelectorAll("button"));
      const craftButtons = buttons.filter(btn => {
        const text = btn.textContent.trim().toLowerCase();
        return text.includes("craft") || /^\d+$/.test(text);
      });

      const buy1Button = craftButtons.find(btn =>
        btn.textContent.trim().includes("1") ||
        btn.textContent.trim().toLowerCase().includes("craft 1")
      );

      const buy10Button = craftButtons.find(btn =>
        btn.textContent.trim().includes("10") ||
        btn.textContent.trim().toLowerCase().includes("craft 10")
      );

      let purchased = 0;

      // T√≠nh to√°n s·ªë l·∫ßn c·∫ßn mua
      const tens = Math.floor(toBuy / 10);
      const ones = toBuy % 10;

      // Mua t·ª´ng l√¥ 10
      for (let i = 0; i < tens; i++) {
        if (!buy10Button) break;
        const success = await safeClickButton(buy10Button, "Craft 10");
        if (success) {
          purchased += 10;
          console.log(`‚úÖ ƒê√£ mua 10 r√¨u (${purchased}/${toBuy})`);
          await new Promise(r => setTimeout(r, 1200));
        } else {
          console.warn("‚ö†Ô∏è Mua 10 th·∫•t b·∫°i, d·ª´ng l·∫°i.");
          break;
        }
      }

      // Mua l·∫ª t·ª´ng c√°i c√≤n l·∫°i
      for (let i = 0; i < ones; i++) {
        if (!buy1Button) break;
        const success = await safeClickButton(buy1Button, "Craft 1");
        if (success) {
          purchased += 1;
          console.log(`‚úÖ ƒê√£ mua 1 r√¨u (${purchased}/${toBuy})`);
          await new Promise(r => setTimeout(r, 800));
        } else {
          console.warn("‚ö†Ô∏è Mua 1 th·∫•t b·∫°i, d·ª´ng l·∫°i.");
          break;
        }
      }

      console.log(`üéâ Ho√†n t·∫•t! ƒê√£ mua ${purchased}/${toBuy} r√¨u.`);
      return purchased === toBuy;

    } catch (error) {
      console.error("‚ùå L·ªói khi mua r√¨u:", error);
      return false;
    }
  }


  // H√†m t√¨m container ch·ª©a craft buttons
  async function findCraftContainer() {
    const selectors = [
      "div.flex.space-x-1.sm\\:space-x-0.sm\\:space-y-1.sm\\:flex-col.w-full",
      "[class*='craft']",
      "[class*='button']",
      "div:has(button)",
      ".market-craft",
      ".craft-section"
    ];

    // Th·ª≠ c√°c selector ph·ªï bi·∫øn
    for (const selector of selectors) {
      try {
        const container = document.querySelector(selector);
        if (container && container.querySelectorAll("button").length > 0) {
          return container;
        }
      } catch (e) {
        continue;
      }
    }

    // Fallback: t√¨m container ch·ª©a button c√≥ text "craft"
    const allButtons = Array.from(document.querySelectorAll("button"));
    const craftButton = allButtons.find(btn => 
      btn.textContent.toLowerCase().includes("craft")
    );
    
    if (craftButton) {
      // T√¨m container cha g·∫ßn nh·∫•t ch·ª©a nhi·ªÅu button
      let parent = craftButton.parentElement;
      while (parent && parent !== document.body) {
        const buttonsInParent = parent.querySelectorAll("button").length;
        if (buttonsInParent >= 2) {
          return parent;
        }
        parent = parent.parentElement;
      }
      return craftButton.parentElement;
    }

    return null;
  }

  

  // H√†m ƒë√≥ng menu
  async function closeMenu() {
    try {
      // T√¨m n√∫t close ho·∫∑c click ra ngo√†i
      const closeButton = document.querySelector("button[aria-label='close']") ||
                        document.querySelector("button:has(svg)") ||
                        document.querySelector(".close-button");
      
      if (closeButton) {
        closeButton.click();
      } else {
        // Click ra ngo√†i ƒë·ªÉ ƒë√≥ng menu
        document.body.click();
      }
      
      await new Promise(r => setTimeout(r, 1000));
      console.log("‚úÖ ƒê√£ ƒë√≥ng Market.");
    } catch (error) {
      console.error("‚ùå L·ªói khi ƒë√≥ng menu:", error);
    }
  }

 // H√†m helper ƒë·ªÉ ki·ªÉm tra xem img c√≥ ph·∫£i l√† c√¢y kh√¥ng (h·ªó tr·ª£ t·∫•t c·∫£ m√πa)
function isTreeImage(imgSrc) {
  if (!imgSrc) return false;
  
  const treeSources = [
    'spring_spring_tree.webp',
    'summer_spring_tree.webp', 
    'autumn_spring_tree.webp',
    'winter_spring_tree.webp',
    'spring_basic_tree.webp'
  ];
  
  return treeSources.some(treeSource => imgSrc.includes(treeSource));
}

function getSeasonFromTreeSrc(treeSrc) {
  if (treeSrc.startsWith('spring_')) return 'spring';
  if (treeSrc.startsWith('summer_')) return 'summer';
  if (treeSrc.startsWith('autumn_')) return 'autumn';
  if (treeSrc.startsWith('winter_')) return 'winter';
  return 'unknown';
}

// H√†m t√¨m t·∫•t c·∫£ c√¢y hi·ªán c√≥ tr√™n m√†n h√¨nh
function findAllTrees() {
  const trees = Array.from(document.querySelectorAll("img"))
    .filter(img => {
      const src = img.src || img.getAttribute('src') || '';
      return isTreeImage(src);
    });
  return trees;
}

// C·∫≠p nh·∫≠t h√†m handleTreeChop ƒë·ªÉ s·ª≠ d·ª•ng findAllTrees
async function handleTreeChop() {
  console.log("üå≤ B·∫Øt ƒë·∫ßu ch·∫∑t c√¢y (h·ªó tr·ª£ t·∫•t c·∫£ m√πa)...");

  let attempt = 0;
  const maxAttempts = 3;

  while (attempt < maxAttempts) {
    attempt++;
    console.log(`üîÑ L·∫ßn th·ª≠ ${attempt}/${maxAttempts}`);

    // Qu√©t l·∫°i c√¢y hi·ªán c√≥ (t·∫•t c·∫£ m√πa)
    const trees = findAllTrees();
    if (trees.length === 0) {
      console.log("‚úÖ Kh√¥ng c√≤n c√¢y n√†o ƒë·ªÉ ch·∫∑t!");
      break;
    }

    console.log(`üå≥ T√¨m th·∫•y ${trees.length} c√¢y c·∫ßn ch·∫∑t...`);

    // Chu·∫©n b·ªã r√¨u (1 r√¨u cho 1 c√¢y)
    const totalAxesNeeded = trees.length;
    const hasEnoughAxes = await checkAndBuyAxes(totalAxesNeeded);
    
    if (!hasEnoughAxes) {
      console.log("‚ùå Kh√¥ng ƒë·ªß r√¨u, b·ªè qua l·∫ßn th·ª≠ n√†y.");
      continue;
    }

    // Ch·∫∑t t·ª´ng c√¢y
    for (let i = 0; i < trees.length; i++) {
      const tree = trees[i];
      
      // Ki·ªÉm tra c√¢y v·∫´n t·ªìn t·∫°i
      if (!document.body.contains(tree)) {
        console.log(`‚ö†Ô∏è C√¢y th·ª© ${i + 1} ƒë√£ bi·∫øn m·∫•t, b·ªè qua.`);
        continue;
      }

      // X√°c ƒë·ªãnh lo·∫°i c√¢y ƒê√öNG C√ÅCH
      const treeSrc = tree.src || tree.getAttribute('src') || '';
      const fileName = treeSrc.split('/').pop() || '';
      const season = getSeasonFromTreeSrc(fileName);

      console.log(`ü™ì Ch·∫∑t c√¢y th·ª© ${i + 1}/${trees.length} (m√πa ${season})...`);
      
      const success = await chopSingleTree(tree, i + 1, season);
      if (!success) {
        console.log(`‚ùå Kh√¥ng th·ªÉ ch·∫∑t c√¢y th·ª© ${i + 1}`);
      }
      
      // Ngh·ªâ gi·ªØa c√°c c√¢y
      await new Promise(resolve => setTimeout(resolve, 800));
    }

    // Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
    await new Promise(resolve => setTimeout(resolve, 2000));
  }

  console.log("üèÅ Ho√†n th√†nh qu√° tr√¨nh ch·∫∑t c√¢y!");
}

// C·∫≠p nh·∫≠t h√†m chopSingleTree ƒë·ªÉ x·ª≠ l√Ω t·∫•t c·∫£ m√πa
async function chopSingleTree(treeElement, treeNumber, season) {
  try {
    console.log(`  üå≥ B·∫Øt ƒë·∫ßu ch·∫∑t c√¢y s·ªë ${treeNumber} m√πa ${season}`);
    
    // Click l·∫ßn ƒë·∫ßu v√†o c√¢y g·ªëc
    console.log(`    ü™ì Click l·∫ßn 1/3 v√†o c√¢y m√πa ${season}...`);
    treeElement.click();
    
    // Ch·ªù 200ms v√† ki·ªÉm tra c√¢y ƒë√£ chuy·ªÉn th√†nh shake
    await new Promise(resolve => setTimeout(resolve, 200));
    
    // Sau click ƒë·∫ßu, element chuy·ªÉn th√†nh background-image v·ªõi shake_sheet
    let currentTree = findShakeTree(season);
    
    if (!currentTree) {
      console.log(`    ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y shake tree m√πa ${season} sau click ƒë·∫ßu`);
      return false;
    }
    
    // Click l·∫ßn 2 v√†o c√¢y shake
    console.log(`    ü™ì Click l·∫ßn 2/3 v√†o c√¢y m√πa ${season}...`);
    currentTree.click();
    
    // Ch·ªù 200ms
    await new Promise(resolve => setTimeout(resolve, 200));
    
    // T√¨m l·∫°i c√¢y shake cho l·∫ßn click cu·ªëi
    currentTree = findShakeTree(season);
    
    if (!currentTree) {
      console.log(`    ‚úÖ C√¢y m√πa ${season} ƒë√£ ƒë∆∞·ª£c ch·∫∑t xong sau 2 l·∫ßn click!`);
      return true;
    }
    
    // Click l·∫ßn 3 v√†o c√¢y shake
    console.log(`    ü™ì Click l·∫ßn 3/3 v√†o c√¢y m√πa ${season}...`);
    currentTree.click();
    
    // Ch·ªù animation ho√†n th√†nh sau l·∫ßn click cu·ªëi (400ms ƒë·ªÉ ƒë·∫£m b·∫£o)
    await new Promise(resolve => setTimeout(resolve, 700));
    
    // Ki·ªÉm tra c√¢y shake ƒë√£ b·ªã x√≥a ch∆∞a
    const finalTree = findShakeTree(season);
    
    if (!finalTree) {
      console.log(`    ‚úÖ C√¢y s·ªë ${treeNumber} m√πa ${season} ƒë√£ b·ªã ch·∫∑t th√†nh c√¥ng!`);
      return true;
    } else {
      console.log(`    ‚ö†Ô∏è C√¢y s·ªë ${treeNumber} m√πa ${season} v·∫´n c√≤n ch∆∞a ch·∫∑t xong sau 3 l·∫ßn click.`);
      return false;
    }

  } catch (error) {
    console.error(`    ‚ùå L·ªói khi ch·∫∑t c√¢y s·ªë ${treeNumber}:`, error);
    return false;
  }
}

// C·∫≠p nh·∫≠t h√†m findShakeTree ƒë·ªÉ h·ªó tr·ª£ t·∫•t c·∫£ m√πa
function findShakeTree(season = null) {
  return Array.from(document.querySelectorAll('*')).find(el => {
    const style = window.getComputedStyle(el);
    if (!style.backgroundImage || !style.backgroundImage.includes('shake_sheet.webp')) {
      return false;
    }
    
    // N·∫øu kh√¥ng ch·ªâ ƒë·ªãnh m√πa, t√¨m b·∫•t k√¨ shake tree n√†o
    if (!season) {
      return true;
    }
    
    const shakePatterns = [
      `${season}_spring_trees_shake_sheet.webp`,  
      `${season}_basic_trees_shake_sheet.webp`   
    ];
    
    return shakePatterns.some(pattern => style.backgroundImage.includes(pattern));
  });
}



async function handleCooking(dishNumber = 1) {
  const firePitContainer = Array.from(
    document.querySelectorAll(".relative.w-full.h-full.cursor-pointer.hover\\:img-highlight")
  ).find((container) => {
    const img = container.querySelector("img");
    return img && img.src.includes("fire_pit.webp");
  });

  if (!firePitContainer) {
    console.log("üî• Kh√¥ng t√¨m th·∫•y Fire Pit, ki·ªÉm tra l·∫°i sau 10 gi√¢y...");
    return;
  }

  console.log("üî• T√¨m th·∫•y Fire Pit! Click ƒë·ªÉ m·ªü menu n·∫•u ƒÉn...");
  firePitContainer.dispatchEvent(new MouseEvent("click", { bubbles: true }));

  await new Promise((resolve) => setTimeout(resolve, delayActionMenu));

  let recipeTitle = Array.from(
    document.querySelectorAll(".fixed.inset-0 .w-full")
  ).find((el) => el.textContent.trim() === "Recipes");

  if (!recipeTitle) {
    console.log("üì¶ Menu ch∆∞a m·ªü (c√≥ th·ªÉ ƒëang thu ho·∫°ch), click l·∫°i Fire Pit...");
    const firePitContainer2 = Array.from(
      document.querySelectorAll(".relative.w-full.h-full.cursor-pointer.hover\\:img-highlight")
    ).find((container) => {
      const img = container.querySelector("img");
      return img && img.src.includes("fire_pit.webp");
    });

    if (firePitContainer2) {
      firePitContainer2.dispatchEvent(new MouseEvent("click", { bubbles: true }));
      await new Promise((resolve) => setTimeout(resolve, delayActionMenu));
      recipeTitle = Array.from(
        document.querySelectorAll(".fixed.inset-0 .w-full")
      ).find((el) => el.textContent.trim() === "Recipes");
    }
  }

  if (!recipeTitle) {
    console.log("‚ùå Kh√¥ng t√¨m th·∫•y menu Recipes sau 2 l·∫ßn th·ª≠, d·ª´ng l·∫°i...");
    return;
  }

  console.log("üìú ƒê√£ m·ªü menu Recipes!");

  const recipeContainer = recipeTitle.nextElementSibling;
  if (!recipeContainer || !recipeContainer.classList.contains("flex")) {
    console.log("‚ùå Kh√¥ng t√¨m th·∫•y danh s√°ch m√≥n ƒÉn.");
    return;
  }

  console.log(`üçΩ Ch·ªçn m√≥n s·ªë ${dishNumber}`);

  const dishes = recipeContainer.querySelectorAll(".relative .cursor-pointer");
  if (dishes.length >= dishNumber) {
    dishes[dishNumber - 1].dispatchEvent(new MouseEvent("click", { bubbles: true }));
    console.log("‚úÖ ƒê√£ ch·ªçn m√≥n ƒÉn!");
  } else {
    console.log("‚ùå Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn theo s·ªë ƒë√£ ch·ªçn.");
    return;
  }

  await new Promise((resolve) => setTimeout(resolve, delayActionMenu));

  // Logic x·ª≠ l√Ω cooking
  let completedActions = 0;
  const maxActions = 10;

  while (completedActions < maxActions) {
    const cancelImages = Array.from(document.querySelectorAll(".fixed.inset-0 img"))
      .filter((img) => img.src.includes("cancel.png"));
    const confirmImages = Array.from(document.querySelectorAll(".fixed.inset-0 img"))
      .filter((img) => img.src.includes("confirm.png"));


    if (confirmImages.length === 0 && cancelImages.length === 0) {
      console.log("Th·ª±c hi·ªán 1 Cook, 3 Add to queue");

      const cooked = await performCookingAction("Cook");
      if (cooked) completedActions++;
      else {
        console.log("‚ùå Kh√¥ng th·ªÉ Cook, d·ª´ng.");
        break;
      }

      let addCount = 0;
      while (addCount < 3) {
        const added = await performCookingAction("Add to queue");
        if (added) {
          completedActions++;
          addCount++;
        } else {
          console.log("‚ùå Kh√¥ng th·ªÉ Add to queue ƒë·ªß 3 l·∫ßn.");
          break;
        }
      }

      continue;
    }

    if (cancelImages.length >= 3) {
      console.log("‚ùå ƒê√≥ng menu");
      break;
    }

    if (cancelImages.length >= 0 && cancelImages.length < 3) {
      console.log("üì• ∆Øu ti√™n Collect, sau ƒë√≥ Add to queue");

      const collected = await performCookingAction("Collect");
      if (collected) completedActions++;

      let cancelCount = Array.from(document.querySelectorAll(".fixed.inset-0 img"))
        .filter((img) => img.src.includes("cancel.png")).length;

      while (cancelCount < 3) {
        const added = await performCookingAction("Add to queue");
        if (added) {
          completedActions++;
        } else {
          console.log("‚ùå Kh√¥ng th·ªÉ Add to queue ti·∫øp.");
          break;
        }

        cancelCount = Array.from(document.querySelectorAll(".fixed.inset-0 img"))
          .filter((img) => img.src.includes("cancel.png")).length;

        if (cancelCount >= 3) break;
      }

      continue;
    }

    console.log("‚ö†Ô∏è D·ª´ng cooking.");
    break;
  }

  console.log(`‚úÖ ƒê√£ ho√†n th√†nh t·ªïng c·ªông ${completedActions} h√†nh ƒë·ªông n·∫•u ƒÉn.`);
  await closeMenu();
}

// H√†m ph·ª• tr·ª£ th·ª±c hi·ªán h√†nh ƒë·ªông n·∫•u ƒÉn
async function performCookingAction(actionName) {
  const buttons = document.querySelectorAll(
    ".w-full.p-1.text-sm.object-contain.justify-center.items-center.hover\\:brightness-90"
  );

  const button = Array.from(buttons).find(
    (btn) => btn.innerText.trim() === actionName && !btn.disabled
  );

  if (button) {
    console.log(`üéØ Th·ª±c hi·ªán: ${actionName}`);
    button.dispatchEvent(new MouseEvent("click", { bubbles: true }));
    await new Promise((resolve) => setTimeout(resolve, delayCookCollectAdd));
    return true;
  } else {
    console.log(`‚ùå Kh√¥ng th·ªÉ th·ª±c hi·ªán: ${actionName}`);
    return false;
  }
}


  // H√†m ƒë√≥ng menu
  async function closeMenu() {
    await new Promise((resolve) => setTimeout(resolve, 1000));

    const closeButton = Array.from(
      document.querySelectorAll(".fixed.inset-0 .absolute.flex img")
    ).find(
      (img) =>
        img.src === "https://sunflower-land.com/game-assets/icons/close.png"
    );

    if (closeButton) {
      console.log("‚ùå ƒê√≥ng menu b·∫±ng c√°ch b·∫•m v√†o n√∫t X");
      closeButton.dispatchEvent(new MouseEvent("click", { bubbles: true }));
    } else {
      console.log("‚ö† Kh√¥ng t√¨m th·∫•y n√∫t X ƒë·ªÉ ƒë√≥ng menu.");
    }
  }

  function simulateRandomClick(img) {
    const rect = img.getBoundingClientRect();
    const randomX = rect.left + Math.random() * rect.width;
    const randomY = rect.top + Math.random() * rect.height;

    console.log(
      `üéØ Click ng·∫´u nhi√™n v√†o X=${randomX.toFixed(2)}, Y=${randomY.toFixed(2)}`
    );

    img.dispatchEvent(
      new MouseEvent("click", {
        bubbles: true,
        clientX: randomX,
        clientY: randomY,
      })
    );
  }

  async function handleFixedElement() {
    console.log("üìå Ph√°t hi·ªán menu ƒë·∫∑c bi·ªát tr√™n trang!");

    const parent = document.querySelector(".fixed .relative.w-full.rounded-md");
    if (!parent) return;

    console.log("üìå ƒê√£ t√¨m th·∫•y ph·∫ßn t·ª≠ cha.");

    // L·∫•y t·∫•t c·∫£ th·∫ª img b√™n trong
    const imgs = parent.querySelectorAll("img");
    if (imgs.length < 2) return;

    // L·∫•y t·ªça ƒë·ªô c·ªßa ·∫£nh th·ª© 2
    const img2 = imgs[1];
    const rect = img2.getBoundingClientRect();

    console.log(`üñ± Click v√†o ·∫£nh t·∫°i X=${rect.left}, Y=${rect.top}`);
    img2.dispatchEvent(new MouseEvent("click", { bubbles: true }));

    // B·∫•m n√∫t "Close"
    clickCloseButton();
  }

  async function handleMoonSeekers() {
    const moonSeekersSpan = document.querySelector(
      ".fixed .flex.flex-col.justify-center span.text-center.mb-2"
    );

    if (moonSeekersSpan) {
      const text = moonSeekersSpan.textContent.toLowerCase(); // Chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng ƒë·ªÉ ki·ªÉm tra
      console.log(`üîç Ph√°t hi·ªán ti√™u ƒë·ªÅ: "${text}"`);

      let validSizes = [];

      if (text.includes("moon seekers")) {
        console.log("üü† X·ª≠ l√Ω Moon Seekers...");
        validSizes = [
          { width: 13, height: 16 },
          { width: 12, height: 16 },
          { width: 16, height: 17 },
          { width: 15, height: 16 },
          { width: 15, height: 17 },
          { width: 96, height: 64 },
          { width: 18, height: 16 },
          { width: 22, height: 25 },
          { width: 18, height: 29 },
          { width: 20, height: 19 },
          { width: 33, height: 28 },
          { width: 29, height: 28 },
          { width: 25, height: 25 },
        ];
      } else if (text.includes("goblins")) {
        console.log("üü¢ X·ª≠ l√Ω goblins...");
        validSizes = [
          { width: 96, height: 64 },
          { width: 18, height: 16 },
          { width: 22, height: 25 },
          { width: 18, height: 29 },
          { width: 20, height: 19 },
          { width: 33, height: 28 },
          { width: 29, height: 28 },
          { width: 25, height: 25 },
          { width: 26, height: 21 },
          { width: 18, height: 12 },
          { width: 25, height: 27 },
          { width: 24, height: 21 },
          { width: 19, height: 21 },
        ];
      }

      if (validSizes.length > 0) {
        // L·∫•y danh s√°ch ·∫£nh c·∫ßn ki·ªÉm tra
        const images = document.querySelectorAll(
          ".fixed .flex.flex-col.justify-center .flex.flex-wrap.justify-center.items-center img"
        );

        for (let img of images) {
          const width = img.naturalWidth;
          const height = img.naturalHeight;

          if (
            validSizes.some(
              (size) => size.width === width && size.height === height
            )
          ) {
            console.log(`üñ± Click v√†o ·∫£nh c√≥ k√≠ch th∆∞·ªõc ${width}x${height}`);
            img.dispatchEvent(new MouseEvent("click", { bubbles: true }));

            // Ch·ªù 500ms gi·ªØa m·ªói l·∫ßn click ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªáu ·ª©ng ho√†n t·∫•t
            await new Promise((resolve) => setTimeout(resolve, 500));
          }
        }
      }

      // G·ªçi function b·∫•m n√∫t Close
      clickCloseButton();
    }
  }

  function clickCloseButton() {
    setTimeout(() => {
      const closeButton = Array.from(
        document.querySelectorAll(".fixed button")
      ).find((btn) => btn.textContent.trim() === "Close");

      if (closeButton) {
        console.log("‚ùå Click v√†o n√∫t Close.");
        closeButton.dispatchEvent(new MouseEvent("click", { bubbles: true }));

        // Ki·ªÉm tra l·∫°i sau khi b·∫•m Close
        setTimeout(() => {
          const remainingImages = Array.from(
            document.querySelectorAll("img")
          ).filter(
            (img) =>
              img.src.includes("plant.png") || img.src.includes("soil2.png")
          );

          if (remainingImages.length > 0) {
            console.log("üîÑ V·∫´n c√≤n ·∫£nh c·∫ßn x·ª≠ l√Ω, ti·∫øp t·ª•c...");
            handlePlantClick();
          } else {
            console.log("‚úÖ Kh√¥ng c√≤n ·∫£nh c·∫ßn x·ª≠ l√Ω, d·ª´ng l·∫°i!");
          }
        }, 1000); // Ch·ªù 1 gi√¢y ƒë·ªÉ trang c·∫≠p nh·∫≠t
      } else {
        console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t Close.");
      }
    }, 1000);
  }

  async function clickSoil2(soilImg) {
    console.log("üñ± Click v√†o soil2.png...");
    soilImg.dispatchEvent(new MouseEvent("click", { bubbles: true }));
    await new Promise((resolve) => setTimeout(resolve, 300));
  }
  

  window.automationFunctions = {
  handlePlantingPhase,
  handleTreeChoppingPhase,
  handleCooking,
  handleBuySeed
};
  